plugins {
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id 'io.codearte.nexus-staging' version '0.21.1'
    id "de.marcphilipp.nexus-publish" version "0.4.0"
}

task ciTest( type: Test )

dependencies {
    testImplementation "org.hamcrest:java-hamcrest:2.0.0.0"
    testImplementation group: 'pl.pragmatists', name: 'JUnitParams', version: '1.0.5'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

apply from: "../java_shared.gradle"

if (hasProperty("ossrhPassword")) {
    signing {
        sign configurations.archives
    }


    nexusStaging {
        packageGroup = group
        username = project.hasProperty("ossrhUsername") ? project.ext["ossrhUsername"] : ""
        password = project.hasProperty("ossrhPassword") ? project.ext["ossrhPassword"] : ""
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = 'Cloudinary Core Library'
                    packaging = 'jar'
                    groupId = publishGroupId
                    artifactId = 'cloudinary-core'
                    description = publishDescription
                    url = githubUrl
                    licenses {
                        license {
                            name = licenseName
                            url = licenseUrl
                        }
                    }

                    developers {
                        developer {
                            id = developerId
                            name = developerName
                            email = developerEmail
                        }
                    }
                    scm {
                        connection = scmConnection
                        developerConnection = scmDeveloperConnection
                        url = scmUrl
                    }
                }

                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }

                // create the signed artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }

        nexusPublishing {
            repositories {
                sonatype {
                    username = project.hasProperty("ossrhUsername") ? project.ext["ossrhUsername"] : ""
                    password = project.hasProperty("ossrhPassword") ? project.ext["ossrhPassword"] : ""
                }
            }
        }

        model {
            tasks.generatePomFileForMavenJavaPublication {
                destination = file("$buildDir/generated-pom.xml")
            }
            tasks.publishMavenJavaPublicationToMavenLocal {
                dependsOn project.tasks.signArchives
            }
            tasks.publishMavenJavaPublicationToSonatypeRepository {
                dependsOn project.tasks.signArchives
            }
        }
    }
}