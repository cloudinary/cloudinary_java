apply from: "../java_shared.gradle"

task ciTest( type: Test ) {
    useJUnit {
        excludeCategories 'com.cloudinary.test.TimeoutTest'
    }
}

dependencies {
    compile project(':cloudinary-core')
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.2.1'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.2.1'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.2.1'
    testCompile project(':cloudinary-test-common')
    testCompile group: 'org.hamcrest', name: 'java-hamcrest', version: '2.0.0.0'
    testCompile group: 'pl.pragmatists', name: 'JUnitParams', version: '1.0.5'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: publishRepo) {
                authentication(userName: project.hasProperty("ossrhUsername") ? project.ext["ossrhUsername"] : "", password: project.hasProperty("ossrhPassword") ? project.ext["ossrhPassword"] : "")
            }

            snapshotRepository(url: snapshotRepo) {
                authentication(userName: project.hasProperty("ossrhUsername") ? project.ext["ossrhUsername"] : "", password: project.hasProperty("ossrhPassword") ? project.ext["ossrhPassword"] : "")
            }

            pom.project {
                groupId publishGroupId
                artifactId 'cloudinary-http42'
                name 'Cloudinary Apache HTTP 4.2 Library'
                description publishDescription
                packaging jar
                version projectVersion

                url githubUrl

                scm {
                    connection scmConnection
                    developerConnection scmDeveloperConnection
                    url scmUrl
                }

                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }

                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
            }

            pom.whenConfigured { pom ->
                pom.dependencies.forEach { dep ->
                    if (dep.getVersion() == "unspecified") {
                        dep.setGroupId(publishGroupId)
                        dep.setVersion(projectVersion)
                    }
                }
            }
        }
    }
}